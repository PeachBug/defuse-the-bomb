/*
    Faculty of Engineering - University of Porto
    SELE [EEC0152] - Electronic Systems
    Professor:
            Hélio Mendonça [hsm@fe.up.pt]
    Authors:
            Diogo Faria Correia [up201504726@fe.up.pt]
            Pedro Miguel Coutinho Augusto [up201503495@fe.up.pt]
*/

#include <Arduino.h>
#include <PCD8544_SELE.h>
#include <bomb.h>

uint8_t uporto[] = {
  0xff, 0xff, 0xfb, 0x03, 
  0x03, 0x03, 0xfb, 0xfb, 0xff, 0xff, 0xfb, 0x03, 0x03, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x04, 0xfc, 0xfc, 0xfc, 0x04, 0x04, 0x8c, 0xfc, 0xf8, 0x70, 0xc0, 0xf0, 0xf8, 0x1c, 0x04, 
  0x04, 0x04, 0x0c, 0x3c, 0xf8, 0xf0, 0x80, 0x04, 0x04, 0xfc, 0xfc, 0x84, 0x84, 0x8c, 0xfc, 0xfc, 
  0x78, 0x00, 0x3c, 0x0c, 0x04, 0x04, 0xfc, 0xfc, 0xfc, 0x04, 0x04, 0x0c, 0x3c, 0x80, 0xf0, 0xf8, 
  0x3c, 0x0c, 0x04, 0x04, 0x04, 0x1c, 0xf8, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xff, 0xff, 0xff, 0xe0, 0xc0, 0xc0, 0x87, 0x9f, 0x9f, 0x9f, 0xcf, 0xc0, 0xf0, 0xff, 0xcf, 0x87, 
  0xcf, 0xff, 0xff, 0x00, 0x00, 0x20, 0x3f, 0x3f, 0x3f, 0x21, 0x01, 0x01, 0x01, 0x00, 0x00, 0x07, 
  0x1f, 0x3f, 0x38, 0x60, 0x60, 0x60, 0x60, 0x38, 0x1f, 0x0f, 0x01, 0x20, 0x20, 0x3f, 0x3f, 0x21, 
  0x21, 0x03, 0x3f, 0x3f, 0x38, 0x20, 0x00, 0x00, 0x00, 0x20, 0x3f, 0x3f, 0x3f, 0x20, 0x20, 0x00, 
  0x00, 0x03, 0x0f, 0x1f, 0x38, 0x60, 0x60, 0x60, 0x60, 0x38, 0x3f, 0x1f, 0x07, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 
};

//16x6+12
uint8_t bomblogo[] = { 
	0x20, 0x00, 0x00, 0x04, 
	0x24, 0x00, 0x00, 0x00, 0xc4, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x83, 0xee, 
	0x7c, 0x00, 0xfe, 0xff, 0xb3, 0xb3, 0xb2, 0x00, 0x00, 0xfe, 0xfe, 0x66, 0x66, 0x24, 0x00, 0x00, 
	0xfc, 0xfc, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x3e, 0x3e, 0x26, 0x26, 0xe6, 0xe6, 0x00, 0x00, 0xf8, 
	0xfc, 0xcc, 0xcc, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xfe, 0xf1, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x01, 0x01, 
	0x02, 0x12, 0x0a, 0x01, 0x01, 0x29, 0x00, 0x00, 0x04, 0x04, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xc1, 0xc0, 0xc0, 0xc0, 0xc3, 0xc1, 0x00, 
	0xc0, 0xc0, 0x80, 0x80, 0xc1, 0xc1, 0x03, 0xc3, 0x43, 0x41, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 
	0x01, 0x00, 0x00, 0x03, 0x07, 0x06, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf0, 0xf0, 0xfc, 0x3e, 0x3e, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0xfe, 0xfc, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 
	0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x87, 
	0x07, 0x00, 0x00, 0x00, 0x07, 0xe7, 0xe1, 0xc1, 0x07, 0x07, 0x00, 0x07, 0x85, 0xc5, 0xe0, 0x00, 
	0x00, 0x00, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x3f, 0xfe, 0xfe, 0xff, 0xdf, 0xdf, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xff, 0xff, 0xff, 0x7e, 0x7e, 0xff, 0xf7, 0xf7, 0xe3, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x8f, 0x8f, 0xff, 0xfe, 0xfc, 0x00, 0xf8, 0xff, 0xff, 0x3f, 0x1f, 0x3e, 0x3e, 0x3f, 
	0x3f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7e, 0x7e, 0xff, 0xf7, 0xf7, 0xe3, 0xc0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 
	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 
	0x00, 0x00, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x00, 0x07, 0x07, 0x03, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
	0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00
};

unsigned long t, explosiontimer;
uint8_t counter, kaboom, rst, rstlst, win, lstkaboom, triggeredWire, expSTATE;
long wire;

void setup() {
  // put your setup code here, to run once:
  randomSeed(micros());
  pinMode(DC, OUTPUT);
  pinMode(RST, OUTPUT);
  pinMode(wire1, INPUT_PULLUP);
  pinMode(wire2, INPUT_PULLUP);
  pinMode(wire3, INPUT_PULLUP);
  pinMode(rstbtn, INPUT_PULLUP);
  PCD8544Init();
  PCD8544SendCommand(0b00100000); //Chip Active, Horizontal Addressing,Basic instruction set
  PCD8544SendCommand(0b00001100); //Normal Display
  /*Show UPorto Logo*/
  zByte(172);
  for (int i=0; i < 187; i++){
    PCD8544SendData(uporto[i]);
    delay(5);
  }
  zByte(145);
  delay(2000);
  /*Show Credits*/
  intro();
  delay(3000);
  /*Show Game logo*/
  zByte(108);
  for (int i=0; i < 396; i++){
    PCD8544SendData(bomblogo[i]);
  }
  delay(3000);
  t = millis();
  initBOMB(&counter, &kaboom, &win, &wire);
  rstlst = HIGH;
}

void loop() {
  checkWires(wire, &win, &kaboom, &lstkaboom, &triggeredWire);
  rstlst = rst;
  rst = digitalRead(rstbtn);

  if(win == 1) winscreen();
  if(lstkaboom == 0 && kaboom == 1){
    if(counter >= GAMEDURATION/2) counter = GAMEDURATION/2; 
    else counter = counter/2;
  } 
  if((kaboom == 0 || kaboom == 1) && win == 0) updatecounter(&t, &counter);
  if(rstlst == HIGH && rst == LOW) initBOMB(&counter, &kaboom, &win, &wire);
  if((counter <= 0) && ((kaboom == 0 )|| (kaboom == 1))){
    kaboom = 2;
    expSTATE = 0;
    explosiontimer = millis();
  }
  if(kaboom == 2 || kaboom == 3) explosion(&expSTATE, &explosiontimer);
}
